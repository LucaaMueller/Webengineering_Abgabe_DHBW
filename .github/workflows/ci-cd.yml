
name: Spring Boot CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: assets_v3

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/assets_v3
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_SECURITY_ENABLED: false

    steps:
      # 1. Code aus dem Repository holen
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. JDK für Spring Boot einrichten
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Maven Tests ausführen
      - name: Run Maven Tests
        run: ./mvnw test -Dspring.profiles.active=ci

      # 4. Docker Image bauen
      - name: Build Docker Image
        run: docker build -t ghcr.io/lucaamueller/webeng2_abgabe_luca_jan:latest .

      # 5. Docker Image in GitHub Container Registry pushen
      - name: Push Docker Image to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image
        run: docker push ghcr.io/lucaamueller/webeng2_abgabe_luca_jan:latest

      # 6. Surefire-Reports hochladen (bei Fehlern hilfreich)
      - name: Upload Surefire Reports
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports
          path: target/surefire-reports/
